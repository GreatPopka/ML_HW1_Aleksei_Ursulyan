# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VaAs3coXK9q6CLLqeiZGUHQPNorhitAp
"""

app = FastAPI()

scaler = joblib.load('scaler.joblib')
model = joblib.load('optimized_ridge_model.joblib')
feature_columns = joblib.load('feature_columns.joblib')

class Item(BaseModel):
    name: str
    year: int
    km_driven: int
    fuel: str
    seller_type: str
    transmission: str
    owner: str
    mileage: str
    engine: str
    max_power: str
    torque: str
    seats: float

class Items(BaseModel):
    objects: List[Item]

def preprocess_data(df):
    if 'mileage' in df.columns:
        df['mileage'] = df['mileage'].str.replace(' kmpl', '').str.replace(' km/kg', '').astype(float)
    if 'engine' in df.columns:
        df['engine'] = df['engine'].str.replace(' CC', '').astype(float)
    if 'max_power' in df.columns:
        df['max_power'] = df['max_power'].str.replace(' bhp', '').astype(float)
    if 'name' in df.columns:
        df = df.drop(columns=['name'])
    df_encoded = pd.get_dummies(df)
    missing_cols = set(feature_columns) - set(df_encoded.columns)
    for col in missing_cols:
        df_encoded[col] = 0
    df_encoded = df_encoded[feature_columns]
    df_scaled = scaler.transform(df_encoded)
    return df_scaled

# json
@app.post("/predict_item")
def predict_item(item: Item) -> float:
    item_dict = item.dict()
    df = pd.DataFrame([item_dict])
    df_scaled = preprocess_data(df)
    prediction_log = model.predict(df_scaled)
    prediction = np.expm1(prediction_log)
    return prediction[0]

# Jsons
@app.post("/predict_items")
def predict_items(items: List[Item]) -> List[float]:
    items_data = [item.dict() for item in items]
    df = pd.DataFrame(items_data)
    df_scaled = preprocess_data(df)
    predictions_log = model.predict(df_scaled)
    predictions = np.expm1(predictions_log)
    return predictions.tolist()

# CSV
@app.post("/predict_csv")
async def predict_csv(file: UploadFile = File(...)):
    contents = await file.read()
    df = pd.read_csv(io.StringIO(contents.decode('utf-8')))
    df_scaled = preprocess_data(df)
    predictions_log = model.predict(df_scaled)
    predictions = np.expm1(predictions_log)
    df['prediction'] = predictions
    with tempfile.NamedTemporaryFile(delete=False, suffix=".csv") as tmp:
        df.to_csv(tmp.name, index=False)
        tmp_path = tmp.name
    return FileResponse(tmp_path, media_type='text/csv', filename='predictions.csv')

def run():
    config = uvicorn.Config(app, host="0.0.0.0", port=8000, log_level="info")
    server = uvicorn.Server(config)
    server.run()

thread = threading.Thread(target=run)
thread.start()